# Copyright 2015 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//apps/mozart/config.gni")

source_set("common") {
  defines = []
  if (mozart_examples_use_scene_manager) {
    defines += [ "MOZART_COMPOSITOR_HEADLESS" ]
  }

  sources = [
    "backend/framebuffer.cc",
    "backend/framebuffer.h",
    "backend/framebuffer_output.cc",
    "backend/framebuffer_output.h",
    "backend/headless_rasterizer.cc",
    "backend/headless_rasterizer.h",
    "backend/output.h",
    "backend/software_rasterizer.cc",
    "backend/software_rasterizer.h",
    "compositor_app.cc",
    "compositor_app.h",
    "compositor_engine.cc",
    "compositor_engine.h",
    "compositor_impl.cc",
    "compositor_impl.h",
    "config.cc",
    "config.h",
    "frame_dispatcher.cc",
    "frame_dispatcher.h",
    "frame_info.h",
    "graph/nodes.cc",
    "graph/nodes.h",
    "graph/paint_context.cc",
    "graph/paint_context.h",
    "graph/resources.cc",
    "graph/resources.h",
    "graph/scene_content.cc",
    "graph/scene_content.h",
    "graph/scene_def.cc",
    "graph/scene_def.h",
    "graph/scene_label.cc",
    "graph/scene_label.h",
    "graph/snapshot.cc",
    "graph/snapshot.h",
    "graph/transform_pair.cc",
    "graph/transform_pair.h",
    "graph/universe.cc",
    "graph/universe.h",
    "render/render_frame.cc",
    "render/render_frame.h",
    "render/render_image.cc",
    "render/render_image.h",
    "renderer_impl.cc",
    "renderer_impl.h",
    "renderer_state.cc",
    "renderer_state.h",
    "scene_impl.cc",
    "scene_impl.h",
    "scene_state.cc",
    "scene_state.h",
    "scheduler.cc",
    "scheduler.h",
  ]

  public_deps = [
    "//application/lib/app",
    "//apps/modular/lib/rapidjson",
    "//apps/mozart/lib/skia:type_converters",
    "//apps/mozart/lib/skia:vmo",
    "//apps/mozart/services/composition",
    "//apps/mozart/services/composition/cpp",
    "//apps/mozart/services/geometry",
    "//apps/mozart/services/geometry/cpp",
    "//apps/tracing/lib/trace:provider",
    "//lib/fidl/cpp/bindings",
    "//lib/ftl",
    "//lib/mtl",
    "//third_party/skia",
  ]

  if (mozart_use_vulkan) {
    defines += [ "MOZART_USE_VULKAN" ]
    sources += [
      "backend/vulkan_rasterizer.cc",
      "backend/vulkan_rasterizer.h",
    ]
    deps = [
      "//flutter/vulkan",
      "//magma:vulkan",
      "//third_party/skia:gpu",
    ]
  }
}

executable("compositor") {
  output_name = "compositor_service"

  configs += [ "//apps/mozart:vulkan_config" ]

  sources = [
    "main.cc",
  ]

  deps = [
    ":common",
  ]
}
# TODO(jeffbrown): Reenable these tests once their dependencies are available.
# executable("apptests") {
#   output_name = "compositor_apptests"
#
#   testonly = true
#
#   sources = [
#     "backend/vsync_scheduler_unittest.cc",
#     "tests/scheduling_apptest.cc",
#   ]
#
#   deps = [
#     ":common",
#     "//apps/mozart/services/composition:interfaces_sync",
#     "//third_party/gtest",
#   ]
# }
