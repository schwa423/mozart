// Copyright 2017 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "apps/mozart/src/scene_manager/resources/image_pipe.h"

#include "apps/mozart/src/scene_manager/fence.h"
#include "apps/mozart/src/scene_manager/resources/gpu_memory.h"
#include "apps/mozart/src/scene_manager/resources/host_memory.h"
#include "apps/mozart/src/scene_manager/session/session.h"

namespace mozart {
namespace scene {

const ResourceTypeInfo ImagePipe::kTypeInfo = {
    ResourceType::kImagePipe | ResourceType::kImageBase, "ImagePipe"};

ImagePipe::ImagePipe(Session* session, ResourceId id)
    : ImageBase(session, id, ImagePipe::kTypeInfo),
      weak_ptr_factory_(this),
      images_(session->error_reporter()) {}

ImagePipe::ImagePipe(Session* session,
                     ResourceId id,
                     ::fidl::InterfaceRequest<mozart2::ImagePipe> request)
    : ImageBase(session, id, ImagePipe::kTypeInfo),
      weak_ptr_factory_(this),
      handler_(std::make_unique<ImagePipeHandler>(std::move(request), this)),
      images_(session->error_reporter()) {}

void ImagePipe::AddImage(uint32_t image_id,
                         mozart2::ImageInfoPtr image_info,
                         mx::vmo vmo,
                         mozart2::MemoryType memory_type,
                         uint64_t memory_offset) {
  if (image_id == 0) {
    session()->error_reporter()->ERROR()
        << "ImagePipe::AddImage: Image can not be assigned an ID of 0.";
    CloseConnectionAndCleanUp();
    return;
  }
  vk::Device device = session()->context()->vk_device();
  MemoryPtr memory;
  switch (memory_type) {
    case mozart2::MemoryType::VK_DEVICE_MEMORY:
      memory = GpuMemory::New(session(), 0u, device, std::move(vmo),
                              session()->error_reporter());
      break;
    case mozart2::MemoryType::HOST_MEMORY:
      memory = HostMemory::New(session(), 0u, device, std::move(vmo),
                               session()->error_reporter());
      break;
  }
  if (!memory) {
    session()->error_reporter()->ERROR()
        << "ImagePipe::AddImage: Unable to create a memory object.";
    CloseConnectionAndCleanUp();
    return;
  }
  auto image = CreateImage(session(), memory, image_info, memory_offset,
                           session()->error_reporter());
  if (!images_.AddResource(image_id, image)) {
    // Provide an additional error message to the one generated by
    // AddResource().
    session()->error_reporter()->ERROR() << "ImagePipe::AddImage had an error.";
    CloseConnectionAndCleanUp();
    return;
  }
};

void ImagePipe::CloseConnectionAndCleanUp() {
  handler_.reset();
  is_valid_ = false;
  frames_.clear();
  images_.Clear();

  // Schedule a new frame.
  session()->context()->ScheduleUpdate(0);
}

void ImagePipe::OnConnectionError() {
  CloseConnectionAndCleanUp();
}

ImagePtr ImagePipe::CreateImage(Session* session,
                                MemoryPtr memory,
                                const mozart2::ImageInfoPtr& image_info,
                                uint64_t memory_offset,
                                ErrorReporter* error_reporter) {
  return Image::New(session, 0u, memory, image_info, memory_offset,
                    error_reporter);
}

void ImagePipe::RemoveImage(uint32_t image_id) {
  if (!images_.RemoveResource(image_id)) {
    // Provide an additional error message to the one generated by
    // RemoveResource().
    session()->error_reporter()->ERROR()
        << "ImagePipe::RemoveImage had an error.";
    CloseConnectionAndCleanUp();
  }
};

void ImagePipe::PresentImage(
    uint32_t image_id,
    uint64_t presentation_time,
    mx::event acquire_fence,
    mx::event release_fence,
    const mozart2::ImagePipe::PresentImageCallback& callback) {
  // Verify that image_id is valid.
  if (!images_.FindResource<Image>(image_id)) {
    // Provide an additional error message to the one generated by
    // FindResource().
    session()->error_reporter()->ERROR()
        << "ImagePipe::PresentImage had an error.";
    CloseConnectionAndCleanUp();
    return;
  }

  auto acquire_fence_obj =
      std::make_unique<AcquireFence>(std::move(acquire_fence));
  acquire_fence_obj->WaitReadyAsync(
      [ weak = weak_ptr_factory_.GetWeakPtr(), presentation_time ] {
        if (weak) {
          weak->session()->ScheduleImagePipeUpdate(presentation_time,
                                                   ImagePipePtr(weak.get()));
        }
      });

  frames_.push_back(Frame{image_id, presentation_time,
                          std::move(acquire_fence_obj),
                          std::move(release_fence), callback});
};

bool ImagePipe::Update(uint64_t presentation_time,
                       uint64_t presentation_interval) {
  ResourceId next_image_id = current_image_id_;
  mx::event next_release_fence;

  while (!frames_.empty() &&
         frames_.front().presentation_time <= presentation_time &&
         frames_.front().acquire_fence->ready()) {
    next_image_id = frames_.front().image_id;
    if (next_release_fence) {
      // We're skipping a frame, so we can immediately signal its release fence.
      next_release_fence.signal(0u, kFenceSignalled);
    }
    next_release_fence = std::move(frames_.front().release_fence);

    auto info = mozart2::PresentationInfo::New();
    info->presentation_time = presentation_time;
    info->presentation_interval = presentation_interval;
    if (frames_.front().present_image_callback) {
      frames_.front().present_image_callback(std::move(info));
    }
    frames_.pop_front();
  }

  if (next_image_id == current_image_id_) {
    // This ImagePipe did not change since the last frame was rendered.
    return false;
  }

  if (auto next_image = images_.FindResource<Image>(next_image_id)) {
    // We're replacing a frame with a new one, so we hand off its release fence
    // to the |ReleaseFenceSignaller|, which will signal it as soon as all work
    // previously submitted to the GPU is finished.
    if (current_release_fence_) {
      session()->context()->release_fence_signaller()->AddCPUReleaseFence(
          std::move(current_release_fence_));
    }
    current_release_fence_ = std::move(next_release_fence);
    current_image_id_ = next_image_id;
    current_image_ = std::move(next_image);

    return true;
  } else {
    session()->error_reporter()->ERROR()
        << "ImagePipe::Update() could not find Image with ID: "
        << next_image_id;
    CloseConnectionAndCleanUp();

    // Tearing down an ImagePipe will very probably result in changes to
    // the global scene-graph.
    return true;
  }
}

const escher::ImagePtr& ImagePipe::GetEscherImage() {
  if (current_image_) {
    return current_image_->GetEscherImage();
  }
  static const escher::ImagePtr kNullEscherImage;
  return kNullEscherImage;
}

}  // namespace scene
}  // namespace mozart
