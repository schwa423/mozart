// Copyright 2017 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module mozart2;

import "apps/mozart/services/composition2/resources.fidl";

// Operations that are used to modify the state of a |Session|.
union Op {
  CreateResourceOp create_resource;
  ReleaseResourceOp release_resource;

  // Node operations.
  AddChildOp add_child;
  AddPartOp add_part;
  DetachOp detach;
  DetachChildrenOp detach_children;
  SetTransformOp set_transform;
  SetShapeOp set_shape;
  SetMaterialOp set_material;
  SetClipOp set_clip;
};

// Instructs the compositor to create the specified |Resource|, and to register
// it in a table so that it can be referenced by subsequent operations.
struct CreateResourceOp {
  // An ID that is currently not used within the session.
  uint32 id;
  Resource resource;
};

// The specified resource will not necessarily be immediately destroyed (for
// example, it may be required to render an in-progress frame, or it may be
// referred to by another resource).  However, the ID will be immediately
// unregistered, and may be reused to create a new resource.
struct ReleaseResourceOp {
  // ID of the resource to be dereferenced.
  uint32 id;
};

// Add a node as a child to another node.
//
// Constraints:
// - |id| refs a Node with the has_children characteristic.
// - |child_id| refs any Node.
//
// Discussion:
// The child node is first removed from its existing parent, as if DetachOp
// was applied first.
struct AddChildOp {
  uint32 node_id;
  uint32 child_id;
};

// Add a node as a part of another node.  The implications of being a part
// rather than a child differ based on the type of the part.  However, one
// implication is constant: removing all of a node's children (e.g. via
// DetachChildrenOp) does not affect its parts.  This is similar to the "shadow
// DOM" in a web browser: the controls of a <video> element are implemented as
// using the shadow DOM, and do no show up amongst the children of that element.
//
// Constraints:
// - |id| refs a Node with the has_parts characteristic.
// - |part_id| refs any Node.
//
// Discussion:
// The part node is first removed from its existing parent, as if DetachOp
// was applied first.
struct AddPartOp {
  uint32 node_id;
  uint32 part_id;
};

// Detaches a node from its parent.
//
// Constraints:
// - |id| refs a Node.
//
// Discussion:
// This works regardless of the node is a part or a child of its parent, and
// also if the node has no parent (in the last case, it is a no-op).
struct DetachOp {
  uint32 node_id;
};

// Detaches all of a node's children (but not its parts).
struct DetachChildrenOp {
  uint32 node_id;
};

// Sets a node's transform.
//
// Constraints:
// - |id| refs a Node with the has_transform characteristic.
struct SetTransformOp {
  uint32 node_id;
  Transform transform;
};

// Sets/clears a node's shape.
//
// Constraints:
// - |id| refs a |Node| with the has_shape characteristic.
// - |shape_id| refs a |Shape|, or nothing.
// - if this op causes the target to have both a |Shape| and a |Material|,
//   then these must be compatible with each other (see README.md regarding
//   "Shape/Material Compatibility").
// TODO: add "Shape/Material Compatibility section"
//
// Discussion:
// In order to be painted, a node requires both a |Shape| and a |Material|.
// Without a material, a node can still participate in hit-testing and clipping.
// Without a shape, a node cannot do any of the above.
struct SetShapeOp {
  uint32 node_id;
  uint32 shape_id;
};

// Sets/clears a node's material.
//
// Constraints:
// - |id| refs a |Node| with the has_material characteristic.
// - |material_id| refs a |Material|, or nothing.
// - if this op causes the target to have both a |Shape| and a |Material|,
//   then these must be compatible with each other (see README.md regarding
//   "Shape/Material Compatibility").
// TODO: add "Shape/Material Compatibility section"
//
// Discussion:
// In order to be painted, a node requires both a |Shape| and a |Material|.
// Without a material, a node can still participate in hit-testing and clipping.
// Without a shape, a node cannot do any of the above.
struct SetMaterialOp {
  uint32 node_id;
  uint32 material_id;
};

// Sets/clears a node's clip.
//
// Constraints:
// - |id| refs a |Node| with the has_clip characteristic.
// - |clip_id| a |Node| with the is_clip characteristic, or nothing.  If the
//   referenced node is not rooted, then it will have no effect (since its
//   full world-transform cannot be determined).
// - |clip_to_self| If false, children are only clipped to the region specified
//   by |clip_id|.  If true, children are additionally clipped to the node's
//   shape (as determined by its ShapeNode parts).
//
// Discussion:
// If a node has a clip, it will be applied to both the parts and the children
// of the node.  Under some circumstances (TBD), a clip will not be applicable
// to a node; in such cases it will be as though no clip has been specified for
// the node.
// TODO: elaborate on the circumstances under which a clip is inapplicable.
// For example, consider a 3D space that looks through a portal into a 2D space
// that uses a clip for a circular reveal.  It would not be meaningful to clip
// objects on the outside (i.e. in the 3D space).
struct SetClipOp {
  uint32 node_id;
  uint32 clip_id;
  bool clip_to_self;
};
