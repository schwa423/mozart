// Copyright 2014 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module mozart;

import "apps/mozart/services/geometry/geometry.fidl";
import "apps/mozart/services/input/input_event_constants.fidl";

// |KeyboardEvent| represents event generated by a user's interaction with a
// keyboard.
//
// Those events are triggered by distinct pressed state changes of the keys.
//
// The state transitions should be as follows:
// PRESSED -> (REPEAT ->) RELEASED
// or
// PRESSED -> (REPEAT ->) CANCELLED
//
// The input system will repeat those events automatically when a code_point is
// available.
struct KeyboardEvent {
  // Time the event was delivered. The time is in nanoseconds and corresponds
  // to the uptime of the machine.
  uint64 event_time;

  // TODO(jpoichet) uint32 device_id;

  enum Phase {
    // When key is pressed down.
    PRESSED,
    // When key is released.
    RELEASED,
    // This key |PRESSED| is not directed to this input client anymore.
    CANCELLED,
    // Whether this is an automatically generated key repeat
    REPEAT,
  };
  Phase phase;

  // Keyboard HID Usage
  // See http://www.usb.org/developers/hidpage/Hut1_12v2.pdf
  uint32 hid_usage;

  // The unicode code point represented by this key event, if any.
  // Dead keys are represented as Unicode combining characters.
  //
  // If there is no unicode code point, this value is zero.
  uint32 code_point;

  // Key modifiers as defined by the different kModifier constants such as
  // |kModifierCapsLock| currently pressed
  uint32 modifiers;
};

// Pointers represent raw data about the user's interaction with the screen.
//
// The state transitions should be as follows:
// ADD (-> HOVER) -> DOWN -> MOVE -> UP (-> HOVER) -> REMOVE
//
// At any point after the initial ADD, a transition to CANCEL is also possible.
struct PointerEvent {
  // Time the event was delivered. The time is in nanoseconds and corresponds
  // to the uptime of the machine.
  uint64 event_time;

  // TODO(jpoichet) uint32 device_id;
  uint32 pointer_id;

  enum Type {
    // A touch-based pointer device.
    TOUCH,

    // A pointer device with a stylus.
    STYLUS,

    // A pointer device with a stylus that has been inverted.
    INVERTED_STYLUS,

    // A pointer device with a stylus.
    MOUSE,
  };
  Type type;

  enum Phase {
    // The device has started tracking the pointer.
    //
    // For example, the pointer might be hovering above the device, having not yet
    // made contact with the surface of the device.
    ADD,

    // The pointer has moved with respect to the device while not in contact with
    // the device.
    HOVER,

    // The pointer has made contact with the device.
    //
    // For |MOUSE| devices, this is triggered when the primary button is pressed
    // down to emulate a touch on the screen.
    DOWN,

    // The pointer has moved with respect to the device while in contact with the
    // device.
    MOVE,

    // The pointer has stopped making contact with the device.
    //
    // For |MOUSE| devices, this is triggered when the primary button is
    // released.
    UP,

    // The device is no longer tracking the pointer.
    //
    // For example, the pointer might have drifted out of the device's hover
    // detection range or might have been disconnected from the system entirely.
    REMOVE,

    // The input from the pointer is no longer directed towards this receiver.
    CANCEL,

    // TODO: add phases to indicate button press / release
  };
  Phase phase;

  // |x| and |y| are in the coordinate system of the View.
  float x;
  float y;

  // TODO(jpoichet) float vx;
  // TODO(jpoichet) float vy;

  float radius_major;
  float radius_minor;
  // TODO(jpoichet) float orientation;
  // TODO(jpoichet) float tilt;
  // TODO(jpoichet) float altitude;
  // TODO(jpichet) float amplitude;

  // Currently pressed buttons as defined the kButton constants such as
  // |kMousePrimaryButton|
  uint32 buttons;
};

union InputEvent {
  PointerEvent pointer;
  KeyboardEvent keyboard;
};
