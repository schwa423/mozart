// Copyright 2014 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module mozart;

import "apps/mozart/services/geometry/geometry.fidl";
import "apps/mozart/services/input/input_event_constants.fidl";

struct KeyData {
  // Keyboard HID Usage
  // See http://www.usb.org/developers/hidpage/Hut1_12v2.pdf
  uint32 hid_usage;

  // The unicode code point represented by this key event, if any.
  //
  // If there is no unicode code point, this value is zero.
  uint32 code_point;

  // Key modifiers currently pressed
  uint32 modifiers;

  // Whether this is an automatically generated key repeat
  bool is_repeat = false;
};

struct PointerData {
  int32 pointer_id;
  PointerKind kind;
  // |x| and |y| are in the coordinate system of the View.
  float x;
  float y;
  // |screen_x| and |screen_y| are in screen coordinates.
  float screen_x;
  float screen_y;
  float pressure;
  float radius_major;
  float radius_minor;
  float orientation;
  // Used for devices that support wheels. Ranges from -1 to 1.
  float horizontal_wheel;
  float vertical_wheel;
};

struct Event {
  // TODO(sky): rename to type.
  EventType action;
  // TODO(sky): parts of this should move to PointerData.
  EventFlags flags;
  // Time the event was delivered. The time is in milliseconds and corresponds
  // to the uptime of the machine.
  int64 time_stamp;
  KeyData? key_data;
  PointerData? pointer_data;
};
