// Copyright 2015 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module mozart;

// TODO(jeffbrown): Redesign input event representation later.
import "apps/mozart/services/input/input_events.fidl";
import "apps/mozart/services/input/text_input.fidl";
import "apps/mozart/services/views/view_token.fidl";

// The input connection service allows a view to receive input events
// such as key presses and pointer movements.

// This service can be retrieved from the |View| service provider.
//
// TODO(jeffbrown): Elaborate this.  Particularly need to think about
// how to handle focus and gestures.
[ServiceName="mozart::InputConnection"]
interface InputConnection {
  // Sets the listener for receiving input events.
  //
  // If |listener| is null, then the previously set listener is removed.
  SetEventListener(InputListener? listener);

  // Sets the listener to for receiving hit testing queries.
  //
  // If |listener| is null, then the previously set listener is removed.
  SetViewHitTester(ViewHitTester? listener);

  // Retrieves an |InputMethodEditor| to handle text editing.
  GetInputMethodEditor(KeyboardType keyboard_type,
                       TextInputState initial_state,
                       InputMethodEditorClient client,
                       InputMethodEditor& editor);
};

// An interface applications may implement to receive events from an
// input connection.
interface InputListener {
  // Called to deliver an input event.
  //
  // The |consumed| result should indicate whether the input event was
  // consumed by the connection.  If |consumed| is false, the system may
  // apply default behavior of its own in response to the event.
  OnEvent(InputEvent event) => (bool consumed);
};

// An interface applications may implement to handle hit testing queries
interface ViewHitTester {
  // Called to hit test the current view.
  //
  // |point| is expressed in the view's local coordinate system.
  //
  // The |was_hit| result should indicate whether the view was hit or not.
  // The |subviews| result should list subviews of the current view that
  // were also hit during the test.
  HitTest(PointF point) => (bool was_hit, array<ViewToken> subviews);
};
