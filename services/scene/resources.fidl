// Copyright 2017 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module mozart2;

import "apps/mozart/services/scene/nodes.fidl";
import "apps/mozart/services/scene/shapes.fidl";
import "apps/mozart/services/scene/types.fidl";
import "apps/mozart/services/images2/image_info.fidl";
import "apps/mozart/services/images2/image_pipe.fidl";
import "apps/mozart/services/images2/memory_type.fidl";

// These are all of the types of resources that can be created within a
// |Session|.
union Resource {
  // Memory resources.
  Memory memory;
  Image image;
  Buffer buffer;

  // Shapes (see shapes.fidl).
  Rectangle rectangle;
  RoundedRectangle rounded_rectangle;
  Circle circle;
  Mesh mesh;

  // Materials.
  Material material;

  // Nodes.
  ClipNode clip_node;
  EntityNode entity_node;
  ShapeNode shape_node;
  TagNode tag_node;

  // Scene representation and display.
  Scene scene;
  Camera camera;
  DisplayRenderer display_renderer;
  ImagePipeRenderer image_pipe_renderer;

  // Lighting.
  DirectionalLight directional_light;

  // A value that can be used in place of a constant value.
  Variable variable;
};

// |Memory| is a |Resource| that wraps a client-provided Magenta vmo to register
// it with Mozart.
// TODO: specify resizing behavior.  Who can resize?  Client/Mozart/both/none?
struct Memory {
  // The VMO which backs this memory.
  handle<vmo> vmo;

  // The type of memory stored in the VMO, namely whether it's GPU memory or
  // host memory.
  MemoryType memory_type;
};

// An image mapped to a range of a |Memory| resource.
// TODO: more precise and extensive docs.
struct Image {
  ImageInfo info;

  uint32 memory_id;      // id of a |Memory| resource
  uint32 memory_offset;  // byte offset of image within |Memory| resource
};

// A buffer mapped to a range of |Memory|.
struct Buffer {
  uint32 memory_id;      // id of a |Memory| resource
  uint32 memory_offset;  // byte offset of buffer within |Memory| resource
  uint32 num_bytes;
};

// A Scene is the root of a scene-graph, and defines the rendering environment
// (lighting, etc.) for the tree of nodes beneath it.  The following operations
// may be  applied to a Scene (see ops.fidl):
//   - Add/RemoveLight
//   - AddChild
struct Scene {
};

// A Camera is used to render a Scene from a particular Viewpoint.  This is
// achieved by setting a Renderer to use the camera.  The following operations
// may be applied to a Camera (see ops.fidl):
//   - SetTransform
//   - SetCameraProjection
struct Camera {
  // The scene that the camera is viewing.
  uint32 scene_id;
};

// Renderers render a Scene via a Camera.  DisplayRenderer presents the rendered
// scene by lighting up pixels a physical display.  The following operations
// may be applied to a DisplayRenderer (see ops.fidl):
//   - SetCamera
// TODO: in the future we will explicitly manage multiple displays.  For now,
// the display is implicitly associated with the SceneManager.
struct DisplayRenderer {
};

// Renderers render a Scene via a Camera.  ImagePipeRenderer pushes rendered
// images of a scene into an ImagePipe.  The following operations may be applied
// to an ImagePipeRenderer (see ops.fidl):
//   - SetCamera
struct ImagePipeRenderer {
  uint32 width;
  uint32 height;
  ImagePipe target;
};

// A DirectionalLight is a Light that is emitted from a point at infinity.
//
// Although the light is directional, the light has some amount of angular
// dispersion (i.e., the light is not fully columnated). For simplicity, we
// assume the dispersion of the light source is symmetric about the light's
// primary direction.
//
// The following operations may be applied to a DirectionalLight (see ops.fidl):
//   - SetDirection
//   - SetLightIntensity
struct DirectionalLight {
  Value direction;  // vec3.
  Value intensity;  // float
};

// Simple texture-mapped material.  If no texture is provided (i.e. |texture_id|
// is zero), a solid color is used.  If a texture is provided, then the value sampled from the texture is
// multiplied by the color.
struct Material {
  uint32 texture_id;  // Refers to an Image resource.  May be zero (no texture).
  // TODO: use Value instead of ColorRgba.
  ColorRgba color;
};

struct Variable {
  ValueType type;
  Value initial_value;  // Must match type.  Must not be a variable_id.
};

// Describes an exported resource that is to be imported by an ImportResourceOp.
// NOTE: Currently just an enum of importable resource types, but may later be
// expanded to express concepts like "meshes with a particular vertex format".
enum ImportSpec {
  NODE,
};
