// Copyright 2017 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module mozart2;

import "apps/mozart/services/scene/resources.fidl";

// Operations that are used to modify the state of a |Session|.
union Op {
  CreateResourceOp create_resource;
  ExportResourceOp export_resource;
  ImportResourceOp import_resource;
  ReleaseResourceOp release_resource;

  // Spatial operations.
  SetTransformOp set_transform;
  SetRotationOp set_rotation;

  // Node-specific operations.
  AddChildOp add_child; // TODO: Should we require a DetachOp before re-parenting?
  AddPartOp add_part;
  DetachOp detach;
  DetachChildrenOp detach_children;
  SetShapeOp set_shape;
  SetMaterialOp set_material;
  SetClipOp set_clip;

  // Camera and lighting operations.
  SetCameraOp set_camera;
  SetCameraProjectionOp set_camera_projection;
  SetLightIntensityOp set_light_intensity;

  SetTextureOp set_texture;
  SetColorOp set_color;
};

// Instructs the compositor to create the specified |Resource|, and to register
// it in a table so that it can be referenced by subsequent operations.
struct CreateResourceOp {
  // An ID that is currently not used within the session.
  uint32 id;
  Resource resource;
};

// The specified resource will not necessarily be immediately destroyed (for
// example, it may be required to render an in-progress frame, or it may be
// referred to by another resource).  However, the ID will be immediately
// unregistered, and may be reused to create a new resource.
struct ReleaseResourceOp {
  // ID of the resource to be dereferenced.
  uint32 id;
};

// Create an external reference to the specified resource, which can then be
// imported into another Session by passing a handle to |token|'s peer to
// ImportResourceOp; see that comment for more details.
//
// The importing client is typically in a different process than the exporter.
// No specific mechanism is provided for transferring a token from an exporter
// to an importer; collaborators may choose any out-of-band API they wish to do
// so.
struct ExportResourceOp {
  uint32 id;
  handle<eventpair> token;
};

// Import a resource that was exported via ExportResourceOp().  |token| is a
// handle to the eventpair peer that was used to export the resource, and |spec|
// describes the type of the imported resource, and the ops which can legally be
// applied to it.  Afterward, |id| can be used to refer to the resource in an
// Op, similarly (but not identically: see below) to a resource that was created
// in the session.  For example, you can add children to an imported EntityNode
// via AddChildOp.
//
// However, note that the importer does not gain full access to the imported
// resource, but rather to an attenuated subset of its capabilities.  For
// example, you cannot use a DetachOp to detach an imported EntityNode from its
// parent.
//
// Unlike ExportResourceOp, there is no configurable timeout.  There is an
// expectation that the exported resource will become available in a short
// amount of time.  TODO: this needs elaboration... e.g. we might notify via the
// SessionListener when we know that the link will never be made (e.g. if the
// peer of the import token is destroyed).
//
// TODO: describe how the imported resource behaves if the exported resource
// isn't yet available, or becomes unavailable (e.g. an imported Material might
// act as a plain white texture).
struct ImportResourceOp {
  uint32 id;
  handle<eventpair> token;
  ImportSpec spec;
};

// Add a node as a child to another node.
//
// Constraints:
// - |id| refs a Node with the has_children characteristic.
// - |child_id| refs any Node.
//
// Discussion:
// The child node is first removed from its existing parent, as if DetachOp
// was applied first.
struct AddChildOp {
  uint32 node_id;
  uint32 child_id;
};

// Add a node as a part of another node.  The implications of being a part
// rather than a child differ based on the type of the part.  However, one
// implication is constant: removing all of a node's children (e.g. via
// DetachChildrenOp) does not affect its parts.  This is similar to the "shadow
// DOM" in a web browser: the controls of a <video> element are implemented as
// using the shadow DOM, and do no show up amongst the children of that element.
//
// Constraints:
// - |id| refs a Node with the has_parts characteristic.
// - |part_id| refs any Node.
//
// Discussion:
// The part node is first removed from its existing parent, as if DetachOp
// was applied first.
struct AddPartOp {
  uint32 node_id;
  uint32 part_id;
};

// Detaches a node from its parent.
//
// Constraints:
// - |id| refs a Node.
//
// Discussion:
// This works regardless of the node is a part or a child of its parent, and
// also if the node has no parent (in the last case, it is a no-op).
struct DetachOp {
  uint32 node_id;
};

// Detaches all of a node's children (but not its parts).
struct DetachChildrenOp {
  uint32 node_id;
};

// Sets a Resource's (typically a Node's) transform.
//
// Constraints:
// - |id| refs a Resource with the has_transform characteristic.
struct SetTransformOp {
  uint32 id;
  Value transform;  // type: kTransform
};

// Sets a Resource's (typically a Node's) rotation.
//
// Constraints:
// - |id| refs a Resource with the has_rotation or has_transform characteristic.
//
// TODO: it's not quite clear how to apply this to a Resource with the
// has_transform characteristic, when the resource already has a Variable
// transform.  When the resource's transform is not a variable, then there is an
// obvious interpretation: only the rotation is set (the translation, scale,
// etc. are left unchanged).
struct SetRotationOp {
  uint32 id;
  Value rotation;  // type: kQuaternion
};

// Sets/clears a node's shape.
//
// Constraints:
// - |node_id| refs a |Node| with the has_shape characteristic.
// - |shape_id| refs a |Shape|, or nothing.
// - if this op causes the target to have both a |Shape| and a |Material|,
//   then these must be compatible with each other (see README.md regarding
//   "Shape/Material Compatibility").
// TODO: add "Shape/Material Compatibility section"
//
// Discussion:
// In order to be painted, a node requires both a |Shape| and a |Material|.
// Without a material, a node can still participate in hit-testing and clipping.
// Without a shape, a node cannot do any of the above.
struct SetShapeOp {
  uint32 node_id;
  uint32 shape_id;
};

// Sets/clears a node's material.
//
// Constraints:
// - |node_id| refs a |Node| with the has_material characteristic.
// - |material_id| refs a |Material|, or nothing.
// - if this op causes the target to have both a |Shape| and a |Material|,
//   then these must be compatible with each other (see README.md regarding
//   "Shape/Material Compatibility").
// TODO: add "Shape/Material Compatibility section"
//
// Discussion:
// In order to be painted, a node requires both a |Shape| and a |Material|.
// Without a material, a node can still participate in hit-testing and clipping.
// Without a shape, a node cannot do any of the above.
struct SetMaterialOp {
  uint32 node_id;
  uint32 material_id;
};

// Sets/clears a node's clip.
//
// Constraints:
// - |node_id| refs a |Node| with the has_clip characteristic.
// - |clip_id| a |Node| with the is_clip characteristic, or nothing.  If the
//   referenced node is not rooted, then it will have no effect (since its
//   full world-transform cannot be determined).
// - |clip_to_self| If false, children are only clipped to the region specified
//   by |clip_id|.  If true, children are additionally clipped to the node's
//   shape (as determined by its ShapeNode parts).
//
// Discussion:
// If a node has a clip, it will be applied to both the parts and the children
// of the node.  Under some circumstances (TBD), a clip will not be applicable
// to a node; in such cases it will be as though no clip has been specified for
// the node.
// TODO: elaborate on the circumstances under which a clip is inapplicable.
// For example, consider a 3D space that looks through a portal into a 2D space
// that uses a clip for a circular reveal.  It would not be meaningful to clip
// objects on the outside (i.e. in the 3D space).
struct SetClipOp {
  uint32 node_id;
  uint32 clip_id;
  bool clip_to_self;
};

// Sets a renderer's camera.
//
// Constraints:
// - |renderer_id| refs a |Renderer|.
// - |camera_id| refs a |Camera|, or stops rendering by passing zero.
// - |matrix| is a value or variable of type kMatrix4x4.
struct SetCameraOp {
  uint32 renderer_id;
  uint32 camera_id;
};

// Sets a camera's projection matrix.
//
// Constraints:
// - |camera_id| refs a |Camera|.
// - |matrix| is a value or variable of type kMatrix4x4.
struct SetCameraProjectionOp {
  uint32 camera_id;
  Value matrix;  // type: kMatrix4x4
};

// Sets the intensity of a Light.
//
// Constraints:
// - |light_id| refs a |Light|.
// - |intensity| is a value or variable of type kFloat..
struct SetLightIntensityOp {
  uint32 light_id;
  Value intensity;  // type: kFloat
};

// Sets/clears a material's texture.
//
// Constraints:
// - |material_id| refs a |Material|.
// - |texture_id| refs a |Image|, or nothing.
//
// If no texture is provided (i.e. |texture_id| is zero), a solid color is used.
// If a texture is provided, then the value sampled from the texture is
// multiplied by the color.
struct SetTextureOp {
  uint32 material_id;
  uint32 texture_id;  // Refers to an Image resource.  May be zero (no texture).
};

// Sets a material's color.
//
// Constraints:
// - |material_id| refs a |Material|.
//
// If a texture is set on the material, then the value sampled from the texture
// is multiplied by the color.
struct SetColorOp {
  uint32 material_id;
  // TODO: use Value instead of ColorRgba.
  ColorRgba color;
};
