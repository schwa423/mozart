// Copyright 2015 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module mozart;

import "application/services/service_provider.fidl";
import "apps/mozart/services/composition/hit_tests.fidl";
import "apps/mozart/services/composition/scene_token.fidl";
import "apps/mozart/services/input/ime_service.fidl";
import "apps/mozart/services/views/view_token.fidl";
import "apps/mozart/services/views/view_tree_token.fidl";

// |FocusChain| defines the chain that a keyboard input event will follow.
struct FocusChain {
  // |version| of the focus chain.
  uint64 version;

  // |chain| is the ordered list of views that a keyboard event will propagate
  array<ViewToken> chain;
};

// Provides a view associate with the ability to inspect and perform operations
// on the contents of views and view trees.
interface ViewInspector {
  // Provides an interface which can be used to perform hit tests on the
  // contents of the view tree's scene graph.
  //
  // The |hit_tester| will be closed if the view tree is not attached to a
  // renderer, when it is reattached to a different renderer, or when the
  // view tree is destroyed.
  //
  // The callback will be invoked the hit tester is invalidated.
  // If |renderer_changed| is true, the client should call |GetHitTester|
  // again to obtain a new one.  Otherwise it should assume that the view
  // tree has become unavailable (so no hit tester is available).
  GetHitTester(ViewTreeToken view_tree_token,
               HitTester& hit_tester)
      => (bool renderer_changed);

  // Given an array of scene tokens, produces an array of view tokens
  // of equal size containing the view to which the scene belongs or null
  // if the scene token does not belong to any view.
  //
  // It is safe to cache the results of this operation because a scene will
  // only ever be associated with at most one view although a view may
  // create several scenes during its lifetime.
  ResolveScenes(array<SceneToken> scene_tokens)
      => (array<ViewToken?> view_tokens);

  // Given a token for a view tree, retrieve the current active focus chain for
  // this view tree.
  ResolveFocusChain(ViewTreeToken view_tree_token) => (FocusChain? focus_chain);

  // TODO(jpoichet) Move this
  // Set the current input focus to the provided |view_token|.
  // This is a back channel from input_manager to view_manager to swap focus
  // on touch down events. This logic should be moved in the future
  ActivateFocusChain(ViewToken view_token) => (FocusChain new_chain);

  // Returns whether view has focus
  HasFocus(ViewToken view_token) => (bool has_focus);

  // Retrieve the SoftKeyboardContainer that is the closest to the ViewToken
  // in the associated ViewTree
  GetSoftKeyboardContainer(ViewToken view_token,
                           SoftKeyboardContainer& container);

  // Retrieve the IME Service that is the closest to the ViewToken
  // in the associated ViewTree
  GetImeService(ViewToken view_token,
                ImeService& ime_service);
};
