// Copyright 2015 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

[DartPackage="mozart_services"]
module mozart;

import "apps/mozart/services/composition/interfaces/hit_tests.mojom";
import "apps/mozart/services/composition/interfaces/scene_token.mojom";
import "apps/mozart/services/composition/interfaces/scheduling.mojom";
import "mojo/services/geometry/interfaces/geometry.mojom";

// The renderer is a service which renders a scene graph to a display.
//
// Use |Compositor.CreateRenderer()| to create a renderer.
interface Renderer {
  // Gets information about the target display for rendering.
  GetDisplayInfo() => (DisplayInfo display_info);

  // Sets the scene to be displayed by the renderer.
  //
  // The |scene_token| specifies the scene which will be drawn as the
  // root of the scene graph.
  //
  // The |scene_version| specifies the version of the scene to render,
  // Use |kSceneVersionNone| to request the most recently published
  // version of the scene if synchronization is unimportant.
  //
  // The |viewport| specifies the portion of the scene to render in pixels.
  //
  // It is an error to create a renderer with an invalid |scene_token|
  // or |size|; the connection will be closed.
  // TODO: make this an event instead
  SetRootScene(SceneToken scene_token,
               uint32 scene_version,
               mojo.Rect viewport);

  // Dissociates the root scene from the renderer.
  ClearRootScene();

  // Gets a scheduler to receive frame timing information for the renderer.
  GetScheduler(FrameScheduler& scheduler);

  // Provides an interface which can be used to perform hit tests on the
  // contents of the renderer's scene graph.
  GetHitTester(HitTester& hit_tester);
};

// Provides information about the display that the renderer targets.
struct DisplayInfo {
  // The size of the display in pixels.
  mojo.Size size;

  // The ratio between the size of one display device pixel to the size
  // of one logical pixel, assuming pixels are square.  This value changes
  // in relation to display density and zoom level.
  // Must be > 0.
  float device_pixel_ratio = 1.0;
};
