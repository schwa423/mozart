// Copyright 2015 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

[DartPackage="mozart_services"]
module mozart;

// Provides support for scheduling drawing and composition operations.
//
// Instances of this interface must be obtained from a |Scene| or |Renderer|.
interface FrameScheduler {
  // Asks the compositor to invoke the callback when it is a good time to
  // draw the next frame.
  //
  // The rate at which the callback is invoked may depend on how the scene
  // has been embedded.  The scene will only receive frame callbacks while
  // it is attached to a scene graph which the compositor has been asked
  // to render since timing information ultimately derives from the
  // renderer.  If the same scene is being rendered to multiple destinations
  // with different timing requirements, the compositor will couple the
  // scene scheduling to one of the renderers.
  //
  // The returned |frame_info| provides information about the frame to
  // be drawn.  This information should be passed to a |mozart::FrameTracker|
  // to apply compensation for skipped frames before using it.
  ScheduleFrame() => (FrameInfo frame_info);
};

// Provides timestamp information about a frame which has been scheduled
// to be drawn.
//
// As there may be latency in receiving an updated |FrameInfo| from the
// system, the consumer of this structure should apply compensation for
// skipped frames.
//
// See |mozart::FrameTracker|.
struct FrameInfo {
  // A timestamp indicating approximately when the contents of the frame
  // will be presented on the display (pixels will light up) assuming
  // the scene update is published in advance of the deadline and everything
  // goes according to plan.
  //
  // This value monotonically increases with each frame, never repeats, and
  // is always greater than |publish_deadline|.
  //
  // This is a good value to use for synchronizing visual effects with other
  // outputs such as audio rendering.  It may also be used to drive animations.
  //
  // Expressed in nanoseconds in the |CLOCK_MONOTONIC| timebase.
  int64 presentation_time;

  // The anticipated time interval between when the currently scheduled frame
  // and the following one will be presented.
  //
  // The interval is approximate and may change at any time.  There is no
  // guarantee that the next frame will occur precisely on the specified
  // interval although that is what is expected to happen in steady state.
  //
  // Expressed in nanoseconds in the |CLOCK_MONOTONIC| timebase.
  uint64 presentation_interval;

  // A timestamp indicating a deadline before which scene updates must be
  // published (by calling |Scene.Publish()| to ensure that they will
  // be presented in this frame.
  //
  // This value monotonically increases with each frame, never repeats, and
  // is always greater than |base_time|.
  //
  // Expressed in nanoseconds in the |CLOCK_MONOTONIC| timebase.
  int64 publish_deadline;

  // A timestamp indicating when the compositor started working on the frame
  // and began delivering scheduled frame callbacks to applications.
  //
  // This value monotonically increases with each frame, never repeats, and
  // always represents a time in the recent past (since processing begins
  // before the callback is delivered).
  //
  // This value serves as an anchor for when processing of a new frame begins.
  // User inputs observed after this time might not be reflected in the state
  // of the scene.
  //
  // Expressed in nanoseconds in the |CLOCK_MONOTONIC| timebase.
  int64 base_time;
};
