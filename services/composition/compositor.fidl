// Copyright 2015 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module mozart;

import "apps/mozart/services/images/image.fidl";
import "apps/mozart/services/composition/renderers.fidl";
import "apps/mozart/services/composition/scene_token.fidl";
import "apps/mozart/services/composition/scenes.fidl";
import "apps/mozart/services/geometry/geometry.fidl";

// The compositor manages scenes and scene graph renderers.
//
// Applications create scenes to describe graphical content they would like
// to render, including references to other scenes they would like to compose.
//
// The system creates a renderer to bind a scene graph to a particular display.
//
// Refer to |Scene| and |Renderer| for more information about these objects.
[ServiceName="mozart::Compositor"]
interface Compositor {
  // Maximum length for a scene or renderer label.
  const uint32 kLabelMaxLength = 32;

  // Creates a scene.
  //
  // The |scene| is used to supply content for the scene.  The scene pipe
  // is private to the scene and should not be shared with anyone else.
  //
  // The |scene_token| is used as a transferable reference which can be passed
  // to owners of other scenes to allow them to embed this scene as a
  // resource.  The compositor itself does not describe how this interaction
  // should take place, only that the token may eventually be used to
  // construct a |SceneResource|.
  //
  // The |label| is an optional name to associate with the view for
  // diagnostic purposes.  The label will be truncated if it is longer
  // than |kLabelMaxLength|.
  //
  // To unregister the scene, simply close the |scene| channel.
  CreateScene(Scene& scene, string? label) => (SceneToken scene_token);

  // Creates a scene graph renderer to a new virtual console.
  //
  // The |label| is an optional name to associate with the renderer for
  // diagnostic purposes.  The label will be truncated if it is longer
  // than |kLabelMaxLength|.
  //
  // To destroy the renderer, simply close the |renderer| channel.
  CreateRenderer(Renderer& renderer,
                 string? label);

  // Take a screenshot
  //
  // Since the compositor can have multiple renderers running at the same
  // time, use the |renderer_index| parameter to specify which renderer
  // to get a screenshot from.
  //
  // Returns an Image |image| or null if could not capture.
  TakeScreenshot(uint32 renderer_index) => (Image? image);
};
