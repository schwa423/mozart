# Copyright 2016 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//packages/package.gni")
import("config.gni")

config("vulkan_config") {
  if (mozart_use_vulkan) {
    defines = [ "MOZART_USE_VULKAN" ]
  }
}

group("all") {
  public_deps = [
    "examples",
    "lib/input",
    "lib/skia",
    "lib/view_framework",
    "services",
    "src",
  ]

  testonly = true
}

package("tests") {
  testonly = true

  deps = [
    "services/composition/cpp:apptests",
    "services/geometry/cpp:apptests",
    "src/input_reader/tests",
    "src/scene:tests",
    "src/view_manager/tests",
  ]

  tests = [
    {
      name = "compositor_services_apptests"
    },
    {
      name = "scene_manager_apptests"
    },
    {
      name = "scene_manager_unittests"
    },
    {
      name = "geometry_util_unittests"
    },
    {
      name = "input_apptests"
    },
    {
      name = "view_manager_apptests"
    },
  ]
}

# Cannot be sandboxed yet because it relies upon /dev/class/input
package("root_presenter") {
  app = true

  deps = [
    "src/root_presenter",
  ]

  binaries = [ {
        name = "root_presenter"
      } ]

  resources = [ {
        path = rebase_path("src/root_presenter/resources/cursor32.png")
        dest = "root_presenter/cursor32.png"
      } ]
}

package("ime_service") {
  archive = true

  deps = [
    "src/ime",
  ]

  binaries = [ {
        name = "ime_service"
        dest = "app"
      } ]
}

package("jank_view") {
  archive = true

  deps = [
    "examples/jank",
  ]

  binaries = [ {
        name = "jank_view"
        dest = "app"
      } ]
}

package("noodles_view") {
  archive = true

  deps = [
    "examples/noodles",
  ]

  binaries = [ {
        name = "noodles_view"
        dest = "app"
      } ]
}

package("paint_view") {
  archive = true

  deps = [
    "examples/paint",
  ]

  binaries = [ {
        name = "paint_view"
        dest = "app"
      } ]
}

package("shapes_view") {
  archive = true

  deps = [
    "examples/shapes",
  ]

  binaries = [ {
        name = "shapes_view"
        dest = "app"
      } ]
}

package("spinning_square_view") {
  archive = true

  deps = [
    "examples/spinning_square",
  ]

  binaries = [ {
        name = "spinning_square_view"
        dest = "app"
      } ]
}

package("tile_view") {
  archive = true

  deps = [
    "examples/tile",
  ]

  binaries = [ {
        name = "tile_view"
        dest = "app"
      } ]
}

package("mozart") {
  app = true
  testonly = true

  deps = [
    ":all",
  ]

  binaries = [
    {
      name = "compositor_service"
    },
    {
      name = "scene_manager_service"
    },
    {
      name = "hello_scene_manager"
    },
    {
      name = "vkcube_mozart"
    },
    {
      name = "hello_scene_manager_service"
    },
    {
      name = "hello_compositor"
    },
    {
      name = "gen/apps/mozart/examples/hello_material/hello_material.flx"
    },
    {
      name = "input"
    },
    {
      name = "gen/apps/mozart/examples/basic_wm/basic_wm.flx"
    },
    {
      name = "launch"
    },
    {
      name = "print_input"
    },
    {
      name = "screencap"
    },
    {
      name = "view_manager_service"
    },
  ]

  resources = [ {
        path = rebase_path("src/compositor/compositor.config")
        dest = "compositor/compositor.config"
      } ]
}
